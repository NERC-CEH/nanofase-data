name: ci-cd

on: [push, pull_request]

jobs:
  build-conda:
    name: Build Conda package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build Conda package
      uses: prefix-dev/rattler-build-action@v0.2.31
      with:
        recipe-path: rattler.recipe/recipe.yaml
        upload-artifact: true
        artifact-name: nfdata-conda

  build-py:
    name: Build Python dist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - name: Install poetry
      uses: snok/install-poetry@v1
    - name: Build package
      run: poetry build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: nfdata-py
        path: dist/

   # build Conda, upload artifact
   # build Python, upload artifact
   # deploy Conda using artifact
   # deploy PyPI using aritfact 

  deploy-conda:
    name: Deploy package on Anaconda
    runs-on: ubuntu-latest
    needs: build-conda

    steps:
    - name: Download the dist
      uses: actions/download-artifact@v4
      with:
        name: nfdata-conda
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Upload Conda package to Anaconda
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_SECRET }}
      run: |
        pip install anaconda-client
        anaconda upload --user samharrison7 *.tar.bz2

  deploy-pypi:
    name: Deploy package on PyPI
    runs-on: ubuntu-latest
    needs: build-py

# #     # Only run if a new tag is pushed
# #     if: startsWith(github.ref, 'refs/tags/')

    environment:
      name: pypi
      url: https://pypi.org/p/nfdata

    # Required for trusted publishing
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Download the dist
      uses: actions/download-artifact@v4
      with:
        name: nfdata-py
        path: dist/
    # Publish to TestPyPI first
    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        attestations: false
    # If that succeeds, publish to real PyPI
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  gh-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: build-py
    # Only run if a new tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    # Required for GitHub release
    permissions:
      id-token: write
      contents: write
    steps:
    - name: Download the dist
      uses: actions/download-artifact@v4
      with:
        name: nfdata-py
        path: dist/
    # Sign the distribution so that we can create a release
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    # Create the release
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"